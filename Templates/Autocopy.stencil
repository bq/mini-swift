{# Thanks to: https://arasthel.com/data-classes-on-swift/#selectwhichvalueswillbechangedandwhichwillbecopied #}
// swiftlint:disable all
public protocol AutoCopy { }

public extension AutoCopy {
    
    func setValueOptional<T>(_ value: OptionalCopyValue<T>, _ defaultValue: T?) -> T? {
        switch(value) {
        case let .new(content):
            return content
        case .same:
            return defaultValue
        default:
            return nil
        }
    }
}

public enum OptionalCopyValue<T>: ExpressibleByNilLiteral {

    case new(T)
    case same
    case `nil`
    
    public init(nilLiteral: ()) {
        self = .nil
    }
}

prefix operator *

prefix func * <T>(lhs: T) -> OptionalCopyValue<T> {
    return .new(lhs)
}

// swiftlint:enable all

{# Thanks to: https://arasthel.com/data-classes-on-swift/#selectwhichvalueswillbechangedandwhichwillbecopied #}

{% for type in types.all where type.implements.AutoCopy %}
    {% if type|annotated:"import" %}
    import {{type.annotations.import }}
    {% endif %}
    // swiftlint:disable all
    extension {{ type.name }} {
    
        func copy(
        {% for variable in type.storedVariables %}
            {{ variable.name }} copied_{{ variable.name }}: OptionalCopyValue<{{ variable.unwrappedTypeName }}> = .same{% if not forloop.last %}, {% endif %}
        {% endfor %}
        ) -> {{ type.name }} {
            return {{ type.name }}(
            {% for variable in type.storedVariables %}
                {% if variable.isOptional %}
                {{ variable.name }}: setValueOptional(copied_{{ variable.name }}, self.{{ variable.name }}){% else %}{{ variable.name }}: setValueOptional(copied_{{ variable.name }}, self.{{ variable.name }}) ?? self.{{ variable.name }}{% endif %}{% if not forloop.last %}, {% endif %}
            {% endfor %}
            )
        }
    }
{% endfor %}
// swiftlint:enable all
